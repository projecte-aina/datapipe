version: "3.9"

###############################################################################
# Services
###############################################################################
services:
  datapipe-db:
    image: postgres:13.1
    container_name: datapipe-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    expose: ["5432"]
    networks: [db-network]
    volumes:
      - ./k8s/postgresql/sql/tables.sql:/docker-entrypoint-initdb.d/db.sql
      - datapipe-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  datapipe-grafana:
    image: grafana/grafana:7.5.4
    container_name: datapipe-grafana
    restart: unless-stopped
    environment:
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=info
    networks: [proxy-net, db-network]
    expose: ["3000"]
    volumes:
      - grafana-data:/var/lib/grafana

  text2lang:
    image: projecteaina/text2lang:latest
    container_name: datapipe-text2lang
    restart: unless-stopped
    networks: [text2lang-net]
    expose: ["8000"]

  preprocessor:
    image: projecteaina/datapipe:latest
    restart: unless-stopped
    command: "preprocessor"
    volumes:
      - datapipe-data:/datapipe
    deploy: {mode: replicated, replicas: 1}
    environment:
      - PYTHONUNBUFFERED=1
      - PG_HOST=datapipe-db
      - PG_PASSWORD=${POSTGRES_PASSWORD}
      - API_URL=http://text2lang:8000/text2lang
      - SKIP_LICENSE_CHECK=${SKIP_LICENSE_CHECK}
    networks: [db-network, text2lang-net]
    depends_on:
      datapipe-db:
        condition: service_healthy

  fetcher:
    image: projecteaina/datapipe:latest
    restart: unless-stopped
    command: "fetcher"
    volumes:
      - datapipe-data:/datapipe
    deploy: {mode: replicated, replicas: 2}
    environment:
      - PYTHONUNBUFFERED=1
      - PG_HOST=datapipe-db
      - PG_PASSWORD=${POSTGRES_PASSWORD}
      - YT_AUDIO_DOWNLOAD_PATH=/datapipe/audio/youtube
      - YT_CAPTION_DOWNLOAD_PATH=/datapipe/caption/youtube
      - CCMA_AUDIO_DOWNLOAD_PATH=/datapipe/audio/ccma
      - CCMA_VIDEO_DOWNLOAD_PATH=/datapipe/tmp/video/ccma
      - CCMA_CAPTION_DOWNLOAD_PATH=/datapipe/caption/ccma
    networks: [db-network]
    depends_on:
      datapipe-db:
        condition: service_healthy

  # keep your locally‑built converter exactly as you had it
  converter:
    build:
      context: .
      dockerfile: Dockerfile
    # image: datapipe-converter:local   ← remove this line
    command: "converter"
    volumes:
      - datapipe-data:/datapipe
      - ./audio16:/datapipe/audio16
    environment:
      - PYTHONUNBUFFERED=1
      - PG_HOST=datapipe-db
      - AUDIO_16_PATH=/datapipe/audio16
      - CCMA_AUDIO_DOWNLOAD_PATH=/datapipe/audio/ccma
      - CCMA_VIDEO_DOWNLOAD_PATH=/datapipe/tmp/video/ccma
      - PG_PASSWORD=${POSTGRES_PASSWORD}
    networks: [db-network]
    depends_on:
      datapipe-db:
        condition: service_healthy

  ona-vosk:
    image: assistent/kaldi-catala:0.0.4
    restart: unless-stopped
    environment:
      - VOSK_SAMPLE_RATE=16000
    expose: ["5001"]
    networks: [ona-vosk-net]

  vad-transcriber:
    image: projecteaina/datapipe:latest
    restart: unless-stopped
    command: "vosk_vad_transcriber"
    volumes:
      - datapipe-data:/datapipe
      - ./audio16:/datapipe/audio16
    deploy: {mode: replicated, replicas: 1}
    environment:
      - PYTHONUNBUFFERED=1
      - PG_HOST=datapipe-db
      - PG_PASSWORD=${POSTGRES_PASSWORD}
      - VOSK_SERVER_HOST=ona-vosk
      - VOSK_SERVER_PORT=5001
    networks: [db-network, ona-vosk-net]
    depends_on:
      datapipe-db:
        condition: service_healthy
      ona-vosk:
        condition: service_started

  splitter:
    image: projecteaina/datapipe:latest
    restart: unless-stopped          # run continuously
    command: "splitter"              # <- NO --one-shot
    volumes:
      - datapipe-data:/datapipe      # single shared volume; no bind‑mount
      - ./audio16:/datapipe/audio16
    environment:
      - PYTHONUNBUFFERED=1
      - PG_HOST=datapipe-db
      - PG_PASSWORD=${POSTGRES_PASSWORD}
      - CLIPS_PATH=/datapipe/clips
    networks: [db-network]
    depends_on:
      datapipe-db:
        condition: service_healthy

  tsv-exporter:
    build: .
    image: projecteaina/datapipe:latest   # re‑use the same image
    restart: unless-stopped
    command: "tsv_exporter"               # entrypoint -> our __main__.py
    volumes:
      - datapipe-data:/datapipe           # same shared volume
    environment:
      - PYTHONUNBUFFERED=1
      - PG_HOST=datapipe-db
      - PG_PASSWORD=${POSTGRES_PASSWORD}
      - TSV_PATH=/datapipe/dataset.tsv
      - PREFERRED_TRANSCRIBER=wav2vec2    # or vosk_vad if you prefer
    depends_on:
      datapipe-db:
        condition: service_healthy        # let Compose wait for DB
    networks:
      - db-network

  gender:
    build:
      context: .            # uses the repo’s Dockerfile
      dockerfile: Dockerfile
    image: datapipe-gender:local   # any tag that isn’t on Docker Hub
    command: "gender"
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - PG_HOST=datapipe-db
      - PG_PASSWORD=${POSTGRES_PASSWORD}
      - CLIPS_PATH=/datapipe/clips
    volumes:
      - datapipe-data:/datapipe
    networks: [db-network]
    depends_on:
      splitter:
        condition: service_started
      datapipe-db:
        condition: service_healthy

###############################################################################
# Named volumes
###############################################################################
volumes:
  datapipe-data:
  datapipe-db-data:
  grafana-data:

###############################################################################
# Networks
###############################################################################
networks:
  proxy-net:
    external: true
  text2lang-net:
  db-network:
  ona-vosk-net: